package com.omiyawaki.osrswiki

import android.app.Application
import android.util.Log
import com.omiyawaki.osrswiki.data.db.OSRSWikiDatabase // Assuming this is your Room database class
import com.omiyawaki.osrswiki.data.db.dao.ArticleMetaDao
import com.omiyawaki.osrswiki.data.repository.ArticleRepository
import com.omiyawaki.osrswiki.network.RetrofitClient // Assuming this is your Retrofit client setup
import com.omiyawaki.osrswiki.network.WikiApiService
// Add other necessary imports for your specific initializations

// Removed @HiltAndroidApp
class OSRSWikiApplication : Application() {

    // --- Manually managed singleton dependencies ---

    // Database and DAOs
    private val database: OSRSWikiDatabase by lazy {
        // Replace with your actual database instantiation logic
        // Example: Room.databaseBuilder(applicationContext, OSRSWikiDatabase::class.java, "osrswiki_database").build()
        OSRSWikiDatabase.getDatabase(this) // Assuming a static getDatabase method
    }

    private val articleMetaDao: ArticleMetaDao by lazy {
        database.articleMetaDao() // Assuming your DB class provides DAO accessors
    }

    // Network Service
    private val wikiApiService: WikiApiService by lazy {
        // Replace with your actual WikiApiService instantiation logic
        // Example: RetrofitClient.retrofit.create(WikiApiService::class.java)
        RetrofitClient.instance.create(WikiApiService::class.java) // Assuming a RetrofitClient singleton
    }

    // Repositories
    // ArticleRepository is now publicly accessible for PageFragment
    lateinit var articleRepository: ArticleRepository
        private set // Make setter private to control instantiation from within Application class

    // You might have other repositories, e.g., SearchRepository
    // lateinit var searchRepository: SearchRepository
    //     private set


    // --- Application Lifecycle ---

    override fun onCreate() {
        super.onCreate()
        instance = this
        Log.d(TAG, "OSRSWikiApplication created and manual DI initializing...")

        // Initialize repositories that depend on other services/DAOs
        // The 'lazy' delegates above will handle on-demand initialization for most.
        // For 'articleRepository', we initialize it here to make it available.
        articleRepository = ArticleRepository(
            mediaWikiApiService = wikiApiService, // from lazy delegate
            articleMetaDao = articleMetaDao,     // from lazy delegate
            applicationContext = this
        )

        // Example for another repository if you have one:
        // searchRepository = SearchRepository(wikiApiService, database.someOtherDao(), ...)

        Log.d(TAG, "Manual DI setup complete.")
    }

    companion object {
        private const val TAG = "OSRSWikiApplication"
        lateinit var instance: OSRSWikiApplication
            private set // Good practice to keep the setter private

        // Example: Manual crash logging function (if you still need it)
        fun logCrashManually(throwable: Throwable) {
            Log.e("OSRSWikiAppCrash", "Manual crash log from Application", throwable)
        }
    }
}
