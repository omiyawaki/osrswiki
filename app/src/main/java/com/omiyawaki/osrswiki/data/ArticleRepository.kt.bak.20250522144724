package com.omiyawaki.osrswiki.data

import android.util.Log
import com.omiyawaki.osrswiki.network.WikiApiService
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

/**
 * Data class to hold both the title and HTML content fetched for an article.
 */
data class ArticleTextContent(
    val title: String?,
    val htmlContent: String?
)

/**
 * Repository responsible for fetching article-specific data (content, images)
 * from the OSRS Wiki via the [WikiApiService].
 */
class ArticleRepository(private val apiService: WikiApiService) {

    private companion object {
        // TAG for logging
        private const val TAG = "ArticleRepository"
    }

    /**
     * Fetches the parsed HTML content and title of an article using its unique page ID.
     *
     * This function makes a network request and should be called from a coroutine.
     * It performs the call on the IO dispatcher.
     *
     * @param pageId The unique integer identifier of the MediaWiki page.
     * @return An [ArticleTextContent] object containing the title and HTML content if successful,
     * otherwise null if an error occurs or the content is not found.
     */
    suspend fun fetchArticleTextContent(pageId: Int): ArticleTextContent? {
        // Perform the network call on the IO dispatcher
        return withContext(Dispatchers.IO) {
            try {
                val response = apiService.getArticleContent(pageId)
                val parseData = response.parse
                if (parseData != null) {
                    // Successfully fetched and parsed data
                    ArticleTextContent(title = parseData.title, htmlContent = parseData.text)
                } else {
                    // Response was successful but contained no parse data
                    Log.w(TAG, "fetchArticleTextContent: Parse data is null for pageId $pageId. Response: $response")
                    null
                }
            } catch (e: Exception) {
                // An exception occurred during the API call (e.g., network issue, serialization error)
                Log.e(TAG, "fetchArticleTextContent: Exception fetching content for pageId $pageId", e)
                null
            }
        }
    }

    /**
     * Fetches the URL of the main thumbnail image for an article using its unique page ID.
     *
     * This function makes a network request and should be called from a coroutine.
     * It performs the call on the IO dispatcher.
     *
     * @param pageId The unique integer identifier of the MediaWiki page.
     * @param thumbSize The desired width (in pixels) for the thumbnail image.
     * @return A [String] representing the URL of the image if successful and an image exists,
     * otherwise null.
     */
    suspend fun fetchArticleImageUrl(pageId: Int, thumbSize: Int = 500): String? {
        // Perform the network call on the IO dispatcher
        return withContext(Dispatchers.IO) {
            try {
                val response = apiService.getArticleImage(pageId, thumbSize)
                // The image URL is nested: response -> query -> pages (list) -> first page -> thumbnail -> source
                val imageUrl = response.query?.pages?.firstOrNull()?.thumbnail?.source
                if (imageUrl == null) {
                    // Log if the image URL is not found in a successful response
                    Log.w(TAG, "fetchArticleImageUrl: Image URL is null in response for pageId $pageId, thumbSize $thumbSize. Response: $response")
                }
                imageUrl
            } catch (e: Exception) {
                // An exception occurred during the API call
                Log.e(TAG, "fetchArticleImageUrl: Exception fetching image URL for pageId $pageId", e)
                null
            }
        }
    }
}
